package  {
	
	public class entityDefinitions {
		//Holds every definition
		//roomDefinitions
		public var randomizedRooms:Array;
		public var R_START:int = 1;
		public var R_EXIT:int = 2;
		public var T_ENEMY:int = 3;
		public var R_ROOM1:int = 7;
		public var R_ROOM2:int = 8;
		public var R_RYU:int = 4;
		public var R_JACKY:int = 9;
		public var R_SLIME:int = 10;
		public var R_LEON:int = 11;
		public var R_RICARDO:int = 12;
		public var R_RILEY:int = 5;
		public var T_VERTICAL:int = 13;
		public var T_HORIZONTAL:int = 14;
		public var T_ITEM:int = 6;
		public var T_ENVIRONMENT:int = 15;
		public var R_EMPTY:int = 16;
		public var R_PUSHPUZZLE:int = 17;
		//wallContainer
		public var WALL_WHITE_BLOCK:int = 1;
		public var WALL_WHITE_BLOCK_V2:int = 2;
		public var WALL_WHITE_BLOCK_V3:int = 3;
		public var WALL_WHITE_BLOCK_V4:int = 4;
		public var WALL_WHITE_BLOCK_V5:int = 5;
		public var WALL_WHITE_BLOCK_V6:int = 6;
		public var WALL_WHITE_BLOCK_V7:int = 7;
		public var WALL_WHITE_BLOCK_V8:int = 8;
		public var WALL_WHITE_BLOCK_V9:int = 9;
		public var WALL_WHITE_BLOCK_H2:int = 10;
		public var WALL_WHITE_BLOCK_H3:int = 11;
		public var WALL_WHITE_BLOCK_H4:int = 12;
		public var WALL_WHITE_BLOCK_H5:int = 13;
		public var WALL_WHITE_BLOCK_H6:int = 14;
		public var WALL_WHITE_BLOCK_H7:int = 15;
		public var WALL_WHITE_BLOCK_H8:int = 16;
		public var WALL_WHITE_BLOCK_H9:int = 17;
		public var WALL_RED_BLOCK:int = 18;
		public var WALL_RED_BLOCK_V2:int = 19;
		public var WALL_RED_BLOCK_V3:int = 20;
		public var WALL_RED_BLOCK_V4:int = 21;
		public var WALL_RED_BLOCK_V5:int = 22;
		public var WALL_RED_BLOCK_V6:int = 23;
		public var WALL_RED_BLOCK_V7:int = 24;
		public var WALL_RED_BLOCK_V8:int = 25;
		public var WALL_RED_BLOCK_V9:int = 26;
		public var WALL_RED_BLOCK_H2:int = 27;
		public var WALL_RED_BLOCK_H3:int = 28;
		public var WALL_RED_BLOCK_H4:int = 29;
		public var WALL_RED_BLOCK_H5:int = 30;
		public var WALL_RED_BLOCK_H6:int = 31;
		public var WALL_RED_BLOCK_H7:int = 32;
		public var WALL_RED_BLOCK_H8:int = 33;
		public var WALL_RED_BLOCK_H9:int = 34;

		// floorDefinitions
		public var FLOOR_SLIME:int = 3;
		public var FLOOR_SLIME_V2:int = 4;
		public var FLOOR_SLIME_V3:int = 5;
		public var FLOOR_SLIME_V4:int = 6;
		public var FLOOR_SLIME_V5:int = 7;
		public var FLOOR_SLIME_V6:int = 8;
		public var FLOOR_SLIME_V7:int = 9;
		public var FLOOR_SLIME_V8:int = 10;
		public var FLOOR_SLIME_V9:int = 11;
		public var FLOOR_SLIME_H2:int = 12;
		public var FLOOR_SLIME_H3:int = 13;
		public var FLOOR_SLIME_H4:int = 14;
		public var FLOOR_SLIME_H5:int = 15;
		public var FLOOR_SLIME_H6:int = 16;
		public var FLOOR_SLIME_H7:int = 17;
		public var FLOOR_SLIME_H8:int = 18;
		public var FLOOR_SLIME_H9:int = 19;
		public var FLOOR_SLIME_2x2:int = 20;
		public var FLOOR_SLIME_3x3:int = 21;
		public var FLOOR_SLIME_4x4:int = 22;
		public var FLOOR_SLIME_5x5:int = 23;
		public var FLOOR_SLIME_6x6:int = 24;
		public var FLOOR_SLIME_7x7:int = 25;
		public var FLOOR_SLIME_8x8:int = 26;
		public var FLOOR_SLIME_9x9:int = 27;
		public var FLOOR_LAVA:int = 28;
		public var FLOOR_LAVA_V2:int = 29;
		public var FLOOR_LAVA_V3:int = 30;
		public var FLOOR_LAVA_V4:int = 31;
		public var FLOOR_LAVA_V5:int = 32;
		public var FLOOR_LAVA_V6:int = 33;
		public var FLOOR_LAVA_V7:int = 34;
		public var FLOOR_LAVA_V8:int = 35;
		public var FLOOR_LAVA_V9:int = 36;
		public var FLOOR_LAVA_H2:int = 37;
		public var FLOOR_LAVA_H3:int = 38;
		public var FLOOR_LAVA_H4:int = 39;
		public var FLOOR_LAVA_H5:int = 40;
		public var FLOOR_LAVA_H6:int = 41;
		public var FLOOR_LAVA_H7:int = 42;
		public var FLOOR_LAVA_H8:int = 43;
		public var FLOOR_LAVA_H9:int = 44;
		public var FLOOR_LAVA_2x2:int = 45;
		public var FLOOR_LAVA_3x3:int = 46;
		public var FLOOR_LAVA_4x4:int = 47;
		public var FLOOR_LAVA_5x5:int = 48;
		public var FLOOR_LAVA_6x6:int = 49;
		public var FLOOR_LAVA_7x7:int = 50;
		public var FLOOR_LAVA_8x8:int = 51;
		public var FLOOR_LAVA_9x9:int = 52;
		public var FLOOR_WATER:int = 53;
		public var FLOOR_WATER_V2:int = 54;
		public var FLOOR_WATER_V3:int = 55;
		public var FLOOR_WATER_V4:int = 56;
		public var FLOOR_WATER_V5:int = 57;
		public var FLOOR_WATER_V6:int = 58;
		public var FLOOR_WATER_V7:int = 59;
		public var FLOOR_WATER_V8:int = 60;
		public var FLOOR_WATER_V9:int = 61;
		public var FLOOR_WATER_H2:int = 62;
		public var FLOOR_WATER_H3:int = 63;
		public var FLOOR_WATER_H4:int = 64;
		public var FLOOR_WATER_H5:int = 65;
		public var FLOOR_WATER_H6:int = 66;
		public var FLOOR_WATER_H7:int = 67;
		public var FLOOR_WATER_H8:int = 68;
		public var FLOOR_WATER_H9:int = 69;
		public var FLOOR_WATER_2x2:int = 70;
		public var FLOOR_WATER_3x3:int = 71;
		public var FLOOR_WATER_4x4:int = 72;
		public var FLOOR_WATER_5x5:int = 73;
		public var FLOOR_WATER_6x6:int = 74;
		public var FLOOR_WATER_7x7:int = 75;
		public var FLOOR_WATER_8x8:int = 76;
		public var FLOOR_WATER_9x9:int = 77;
		public var FLOOR_PUSH_UP:int = 78;
		public var FLOOR_PUSH_DOWN:int = 79;
		public var FLOOR_PUSH_LEFT:int = 80;
		public var FLOOR_PUSH_RIGHT:int = 81;
		
		public var FLOOR_BUTTON_PRESSURE_PLATE:int = 179;
		public var FLOOR_BUTTON_SENSOR:int = 180;
		public var FLOOR_EXIT:int = 2;
		public var FLOOR_START:int = 1;
		
		// itemDefinitions
		public var workingItems:Array;
		public var itemnameArray:Array;
		public var LIST_STARTING_ITEMS:String = "Starting Items";
		public var LIST_RICARDO_ITEMS;
		public var LIST_WORKING_ITEMS:String = "Working Item Assets";
		private var startingRoomItems:Array;
		private var allItemList:Array;
		private var NULL:int = 1;
		public var ITEM_HEALTH_1:int = 2;
		public var ITEM_HEALTH_2:int = 3;
		public var ITEM_HEALTH_5:int = 4;
		public var ITEM_HEALTH_10:int = 5;
		public var ITEM_HEALTH_25:int = 6;
		public var ITEM_HEALTH_50:int = 7;
		public var ITEM_HEALTH_100:int = 8;
		public var ITEM_HEALTH_150:int = 9;
		public var ITEM_HEALTH_200:int = 10;
		public var ITEM_HEALTH_500:int = 11;
		public var ITEM_HEALTH_5_PERCENT:int = 12;
		public var ITEM_HEALTH_10_PERCENT:int = 13;
		public var ITEM_HEALTH_25_PERCENT:int = 14;
		public var ITEM_HEALTH_100_PERCENT:int = 15;
		public var ITEM_ARMOR_GREEN_1:int = 16;
		public var ITEM_ARMOR_GREEN_5:int = 17;
		public var ITEM_ARMOR_GREEN_25:int = 18;
		public var ITEM_ARMOR_YELLOW_25:int = 19;
		public var ITEM_ARMOR_YELLOW_50:int = 20;
		public var ITEM_ARMOR_YELLOW_75:int = 21;
		public var ITEM_ARMOR_YELLOW_100:int = 22;
		public var ITEM_ARMOR_RED_100:int = 23;
		public var ITEM_ARMOR_RED_150:int = 24;
		public var ITEM_ARMOR_RED_200:int = 25;
		public var ITEM_ARMOR_RED_250:int = 26;
		public var ITEM_ARMOR_TITAN_250:int = 27;
		public var ITEM_ARMOR_TITAN_500:int = 28;
		public var ITEM_ARMOR_TITAN_100_PERCENT:int = 29;
		public var ITEM_MEGA_100:int = 30;
		public var ITEM_MEGA_500:int = 31;
		public var ITEM_MEGA_50_PERCENT:int = 32;
		public var ITEM_MEGA_100_PERCENT:int = 33;
		public var ITEM_AMMO_SMALL_BULLET:int = 34;
		public var ITEM_AMMO_SMALL_SHELL:int = 35;
		public var ITEM_AMMO_SMALL_ROCKET:int = 36;
		public var ITEM_AMMO_SMALL_SLUG:int = 37;
		public var ITEM_AMMO_SMALL_CELL:int = 38;
		public var ITEM_AMMO_SMALL_EXPLOSIVE:int = 39;
		public var ITEM_WEAPON_BLASTER:int = 40;
		public var ITEM_WEAPON_GRENADE_LAUNCHER:int = 41;
		public var ITEM_WEAPON_MACHINEGUN:int = 42;
		public var ITEM_WEAPON_PLASMA_CANNON:int = 43;
		public var ITEM_WEAPON_PLASMA_RIFLE:int = 44;
		public var ITEM_WEAPON_ROCKET_LAUNCHER:int = 45;
		public var ITEM_WEAPON_SHOTGUN:int = 46;
		public var ITEM_WEAPON_SNIPER_RIFLE:int = 47;
		public var ITEM_WEAPON_RAILGUN:int = 48;
		public var ITEM_POWERUP_REGEN:int = 49;
		public var ITEM_POWERUP_RAPID_FIRE:int = 50;
		public var ITEM_WEAPON_COMBAT_KNIFE:int = 51;
		public var ITEM_WEAPON_CHAINGUN:int = 52;
		
		// weaponDefinitions
		public var BLASTER:String = "Blaster";
		public var FIST:String = "Fist";
		public var COMBAT_KNIFE:String = "Combat Knife";
		public var NONE:String = "None";
		public var PLASMA_CANNON:String = "Plasma Cannon";
		public var PLASMA_RIFLE:String = "Plasma Rifle";
		public var ROCKET_LAUNCHER:String = "Rocket Launcher";
		public var GRENADE_LAUNCHER:String = "Grenade Launcher";
		public var MACHINEGUN:String = "Machinegun";
		public var SNIPER_RIFLE:String = "Sniper Rifle";
		public var RAILGUN:String = "Railgun";
		public var SHOTGUN:String = "Shotgun";
		public var CHAINGUN:String = "Chaingun";
		
		// pushDefinitions
		public var PUSH_BLUEBLOCK:int = 1;
		public var PUSH_BLUEBLOCK_2X2:int = 2;
		
		// enemyDefinitions
		private var enemynameArray:Array;
		public var ENEMY_TEST:int = 1;

		public function entityDefinitions(): void {
			// constructor code
			workingItems = new Array(ITEM_HEALTH_1,ITEM_HEALTH_2,ITEM_HEALTH_5,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_5,ITEM_ARMOR_GREEN_25,ITEM_ARMOR_YELLOW_25,ITEM_ARMOR_YELLOW_50,ITEM_ARMOR_YELLOW_75,ITEM_ARMOR_YELLOW_100,ITEM_ARMOR_RED_100,ITEM_ARMOR_RED_150,ITEM_ARMOR_RED_200,ITEM_AMMO_SMALL_BULLET,ITEM_AMMO_SMALL_SHELL,ITEM_AMMO_SMALL_ROCKET,ITEM_AMMO_SMALL_CELL,ITEM_WEAPON_BLASTER,ITEM_WEAPON_MACHINEGUN,ITEM_WEAPON_GRENADE_LAUNCHER,ITEM_WEAPON_PLASMA_RIFLE,ITEM_POWERUP_REGEN);
			randomizedRooms = new Array(T_ENEMY,R_ROOM1,R_ROOM2,R_RYU,R_JACKY,R_SLIME,R_LEON,R_RICARDO,R_RILEY,T_VERTICAL,T_HORIZONTAL,T_ITEM,T_ENVIRONMENT,T_ENVIRONMENT,R_EMPTY,R_PUSHPUZZLE);
			randomizedRooms.push(R_PUSHPUZZLE,R_PUSHPUZZLE,R_PUSHPUZZLE,R_PUSHPUZZLE,R_PUSHPUZZLE,R_PUSHPUZZLE,R_PUSHPUZZLE,R_PUSHPUZZLE,R_PUSHPUZZLE);
			//randomizedRooms.push(T_ENVIRONMENT,T_ENVIRONMENT,T_ENVIRONMENT,T_ENVIRONMENT,T_ENVIRONMENT);
			itemnameArray = new Array("random","health_1","health_2","health_5","health_10","health_25","health_50","health_100","health_150","health_200","health_500","stim_5","stim_10","stim_25","stim_100","armor_green_1","armor_green_5","armor_green_25","armor_yellow_25","armor_yellow_50","armor_yellow_75","armor_yellow_100","armor_red_100","armor_red_150","armor_red_200","armor_red_250","armor_titan_250","armor_titan_500","armor_titan_100_percent","mega_100","mega_500",
								  "mega_50_percent","mega_100_percent","ammo_small_bullet","ammo_small_shell","ammo_small_rocket","ammo_small_slug","ammo_small_cell","ammo_small_explosive","weapon_blaster","weapon_grenade_launcher","weapon_machinegun","weapon_plasma_cannon","weapon_plasma_rifle","weapon_rocket_launcher","weapon_shotgun","weapon_sniper_rifle","weapon_railgun","powerup_regen","powerup_rapid_fire","weapon_combat_knife","weapon_chaingun");
			startingRoomItems = new Array(ITEM_HEALTH_25,ITEM_HEALTH_25,ITEM_HEALTH_10,ITEM_HEALTH_10,ITEM_HEALTH_10,ITEM_HEALTH_10,ITEM_HEALTH_5,ITEM_HEALTH_5,ITEM_HEALTH_5,ITEM_HEALTH_5,ITEM_HEALTH_5,ITEM_HEALTH_5,ITEM_HEALTH_5,ITEM_HEALTH_5,ITEM_ARMOR_YELLOW_25,ITEM_ARMOR_GREEN_25,ITEM_ARMOR_GREEN_25,ITEM_ARMOR_GREEN_5,ITEM_ARMOR_GREEN_5,ITEM_ARMOR_GREEN_5,ITEM_ARMOR_GREEN_5,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,
										  ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_1,ITEM_AMMO_SMALL_SHELL,ITEM_AMMO_SMALL_SHELL,ITEM_AMMO_SMALL_BULLET,ITEM_AMMO_SMALL_BULLET);
			allItemList = new Array(ITEM_HEALTH_1,ITEM_HEALTH_2,ITEM_HEALTH_5,ITEM_HEALTH_10,ITEM_HEALTH_25,ITEM_HEALTH_50,ITEM_HEALTH_100,ITEM_HEALTH_150,ITEM_HEALTH_200,ITEM_HEALTH_500,ITEM_HEALTH_5_PERCENT,ITEM_HEALTH_10_PERCENT,ITEM_HEALTH_25_PERCENT,ITEM_HEALTH_100_PERCENT,ITEM_ARMOR_GREEN_1,ITEM_ARMOR_GREEN_5,ITEM_ARMOR_GREEN_25,ITEM_ARMOR_YELLOW_25,ITEM_ARMOR_YELLOW_50,ITEM_ARMOR_YELLOW_75,ITEM_ARMOR_YELLOW_100,ITEM_ARMOR_RED_100,ITEM_ARMOR_RED_150,ITEM_ARMOR_RED_200,
									ITEM_ARMOR_RED_250,ITEM_ARMOR_TITAN_250,ITEM_ARMOR_TITAN_500,ITEM_ARMOR_TITAN_100_PERCENT,ITEM_MEGA_100,ITEM_MEGA_500,ITEM_MEGA_50_PERCENT,ITEM_MEGA_100_PERCENT,ITEM_AMMO_SMALL_BULLET,ITEM_AMMO_SMALL_SHELL,ITEM_AMMO_SMALL_ROCKET,ITEM_AMMO_SMALL_SLUG,ITEM_AMMO_SMALL_CELL,ITEM_AMMO_SMALL_EXPLOSIVE,ITEM_WEAPON_BLASTER,ITEM_WEAPON_GRENADE_LAUNCHER,ITEM_WEAPON_MACHINEGUN,ITEM_WEAPON_PLASMA_CANNON,ITEM_WEAPON_PLASMA_RIFLE,ITEM_WEAPON_ROCKET_LAUNCHER,
									ITEM_WEAPON_SHOTGUN,ITEM_WEAPON_SNIPER_RIFLE,ITEM_WEAPON_RAILGUN,ITEM_POWERUP_REGEN,ITEM_POWERUP_RAPID_FIRE,ITEM_WEAPON_COMBAT_KNIFE,ITEM_WEAPON_CHAINGUN);/*,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
												  NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
												*/
			enemynameArray = new Array("test");
		}
		public function getRandomizedRoomArray():Array{
			return randomizedRooms;
		}
		public function getEnemyNameArray():Array{
			return enemynameArray;
		}
		public function getItemNameArray():Array{
			return itemnameArray;
		}
		public function randomizeItems(list:String):int{
			var chosenitem:int
			switch (list){
				case LIST_STARTING_ITEMS:
					chosenitem = startingRoomItems[Math.ceil(Math.random() * startingRoomItems.length)];
					break;
				case LIST_WORKING_ITEMS:
					chosenitem = workingItems[Math.ceil(Math.random() * workingItems.length)];
					break;
				default:
					trace("Undefined List");
					break;
			}
			return chosenitem;
		}
		
		public function randomizeAllItems():int{
			var chosenitem:int = allItemList[Math.ceil(Math.random() * allItemList.length)];
			if (chosenitem == 1){
				chosenitem == 2;
			}
			return chosenitem;
		}
	}
	
}
